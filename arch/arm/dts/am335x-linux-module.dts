/*
 * Copyright (C) 2012 Texas Instruments Incorporated - http://www.ti.com/
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */
/dts-v1/;

#include "am33xx.dtsi"
#include <dt-bindings/interrupt-controller/irq.h>

/ {
	model = "Bluefuit Linux Module";
	compatible = "ti,am33xx";

	chosen {
		stdout-path = &uart0;
		tick-timer = &timer2;
	};

	memory {
		device_type = "memory";
		reg = <0x80000000 0x20000000>; /* 512 MB */
	};
};

&am33xx_pinmux {
	pinctrl-names = "default";

	uart0_pins: pinmux_uart0_pins {
		pinctrl-single,pins = <
			0x170 (PIN_INPUT_PULLUP | MUX_MODE0)	/* uart0_rxd.uart0_rxd */
			0x174 (PIN_OUTPUT_PULLDOWN | MUX_MODE0)	/* uart0_txd.uart0_txd */
		>;
	};

	uart1_pins: pinmux_uart1_pins {
		pinctrl-single,pins = <
			0x178 (PIN_INPUT | MUX_MODE0)		/* uart1_ctsn.uart1_ctsn */
			0x17C (PIN_OUTPUT_PULLDOWN | MUX_MODE0)	/* uart1_rtsn.uart1_rtsn */
			0x180 (PIN_INPUT_PULLUP | MUX_MODE0)	/* uart1_rxd.uart1_rxd */
			0x184 (PIN_OUTPUT_PULLDOWN | MUX_MODE0)	/* uart1_txd.uart1_txd */
		>;
	};

	mydebugss1_pins_default: mydebugss1_pins_default {
		pinctrl-single,pins = <
			AM33XX_IOPAD(0x9d0, PIN_INPUT | MUX_MODE0) /* (C14) TMS.TMS */
			AM33XX_IOPAD(0x9d4, PIN_INPUT | MUX_MODE0) /* (B13) TDI.TDI */
			AM33XX_IOPAD(0x9d8, PIN_OUTPUT | MUX_MODE0) /* (A14) TDO.TDO */
			AM33XX_IOPAD(0x9dc, PIN_INPUT | MUX_MODE0) /* (B14) TCK.TCK */
			AM33XX_IOPAD(0x9e0, PIN_INPUT | MUX_MODE0) /* (A13) nTRST.nTRST */
			AM33XX_IOPAD(0x9e4, PIN_INPUT | MUX_MODE0) /* (A15) EMU0.EMU0 */
			AM33XX_IOPAD(0x9e8, PIN_INPUT | MUX_MODE0) /* (D14) EMU1.EMU1 */
			AM33XX_IOPAD(0x9b0, PIN_INPUT | MUX_MODE6) /* (C15) xdma_event_intr0.EMU2 */
			AM33XX_IOPAD(0x9b4, PIN_INPUT | MUX_MODE6) /* (B15) xdma_event_intr1.EMU3 */
			AM33XX_IOPAD(0x960, PIN_INPUT | MUX_MODE6) /* (B16) spi0_cs1.EMU4 */
		>;
	};

	myglue1_pins_default: myglue1_pins_default {
		pinctrl-single,pins = <
			AM33XX_IOPAD(0x9b8, PIN_INPUT | MUX_MODE0) /* (A16) nRESETIN_OUT.nRESETIN_OUT */
			AM33XX_IOPAD(0x9c0, PIN_INPUT | MUX_MODE0) /* (C17) nNMI.nNMI */
		>;
	};

	mygpio2_pins_default: mygpio2_pins_default {
		pinctrl-single,pins = <
			AM33XX_IOPAD(0x964, PIN_INPUT | MUX_MODE7) /* (E18) eCAP0_in_PWM0_out.gpio0[7] */
		>;
	};

	mygpio3_pins_default: mygpio3_pins_default {
		pinctrl-single,pins = <
			AM33XX_IOPAD(0x878, PIN_INPUT | MUX_MODE7) /* (V18) gpmc_be1n.gpio1[28] */
		>;
	};

	mygpio4_pins_default: mygpio4_pins_default {
		pinctrl-single,pins = <
			AM33XX_IOPAD(0x908, PIN_INPUT | MUX_MODE7) /* (J19) gmii1_col.gpio3[0] */
		>;
	};

	mygpmc1_pins_default: mygpmc1_pins_default {
		pinctrl-single,pins = <
			AM33XX_IOPAD(0x81c, PIN_INPUT | MUX_MODE0) /* (W15) gpmc_ad7.gpmc_ad7 */
			AM33XX_IOPAD(0x818, PIN_INPUT | MUX_MODE0) /* (U14) gpmc_ad6.gpmc_ad6 */
			AM33XX_IOPAD(0x814, PIN_INPUT | MUX_MODE0) /* (W14) gpmc_ad5.gpmc_ad5 */
			AM33XX_IOPAD(0x810, PIN_INPUT | MUX_MODE0) /* (V13) gpmc_ad4.gpmc_ad4 */
			AM33XX_IOPAD(0x80c, PIN_INPUT | MUX_MODE0) /* (W13) gpmc_ad3.gpmc_ad3 */
			AM33XX_IOPAD(0x808, PIN_INPUT | MUX_MODE0) /* (V12) gpmc_ad2.gpmc_ad2 */
			AM33XX_IOPAD(0x804, PIN_INPUT | MUX_MODE0) /* (V9) gpmc_ad1.gpmc_ad1 */
			AM33XX_IOPAD(0x800, PIN_INPUT | MUX_MODE0) /* (W10) gpmc_ad0.gpmc_ad0 */
			AM33XX_IOPAD(0x870, PIN_INPUT | MUX_MODE0) /* (R15) gpmc_wait0.gpmc_wait0 */
			AM33XX_IOPAD(0x88c, PIN_INPUT | MUX_MODE2) /* (V16) gpmc_clk.gpmc_wait1 */
			AM33XX_IOPAD(0x874, PIN_OUTPUT | MUX_MODE0) /* (W18) gpmc_wpn.gpmc_wpn */
			AM33XX_IOPAD(0x87c, PIN_OUTPUT | MUX_MODE0) /* (W8) gpmc_csn0.gpmc_csn0 */
			AM33XX_IOPAD(0x880, PIN_OUTPUT | MUX_MODE0) /* (V14) gpmc_csn1.gpmc_csn1 */
			AM33XX_IOPAD(0x884, PIN_OUTPUT | MUX_MODE0) /* (U15) gpmc_csn2.gpmc_csn2 */
			AM33XX_IOPAD(0x888, PIN_OUTPUT | MUX_MODE0) /* (U17) gpmc_csn3.gpmc_csn3 */
			AM33XX_IOPAD(0x890, PIN_OUTPUT | MUX_MODE0) /* (V10) gpmc_advn_ale.gpmc_advn_ale */
			AM33XX_IOPAD(0x894, PIN_OUTPUT | MUX_MODE0) /* (W9) gpmc_oen_ren.gpmc_oen_ren */
			AM33XX_IOPAD(0x898, PIN_OUTPUT | MUX_MODE0) /* (U8) gpmc_wen.gpmc_wen */
			AM33XX_IOPAD(0x89c, PIN_OUTPUT | MUX_MODE0) /* (V8) gpmc_be0n_cle.gpmc_be0n_cle */
		>;
	};

	myi2c1_pins_default: myi2c1_pins_default {
		pinctrl-single,pins = <
			AM33XX_IOPAD(0x98c, PIN_INPUT | MUX_MODE0) /* (B19) I2C0_SCL.I2C0_SCL */
			AM33XX_IOPAD(0x988, PIN_INPUT | MUX_MODE0) /* (C18) I2C0_SDA.I2C0_SDA */
		>;
	};

	mylcdc1_pins_default: mylcdc1_pins_default {
		pinctrl-single,pins = <
			AM33XX_IOPAD(0x8e0, PIN_OUTPUT | MUX_MODE0) /* (U7) lcd_vsync.lcd_vsync */
			AM33XX_IOPAD(0x8e4, PIN_OUTPUT | MUX_MODE0) /* (T7) lcd_hsync.lcd_hsync */
			AM33XX_IOPAD(0x8e8, PIN_OUTPUT | MUX_MODE0) /* (W5) lcd_pclk.lcd_pclk */
			AM33XX_IOPAD(0x8ec, PIN_OUTPUT | MUX_MODE0) /* (W7) lcd_ac_bias_en.lcd_ac_bias_en */
			AM33XX_IOPAD(0x8a0, PIN_OUTPUT | MUX_MODE0) /* (U1) lcd_data0.lcd_data0 */
			AM33XX_IOPAD(0x8a4, PIN_OUTPUT | MUX_MODE0) /* (U2) lcd_data1.lcd_data1 */
			AM33XX_IOPAD(0x8a8, PIN_OUTPUT | MUX_MODE0) /* (V1) lcd_data2.lcd_data2 */
			AM33XX_IOPAD(0x8ac, PIN_OUTPUT | MUX_MODE0) /* (V2) lcd_data3.lcd_data3 */
			AM33XX_IOPAD(0x8b0, PIN_OUTPUT | MUX_MODE0) /* (W2) lcd_data4.lcd_data4 */
			AM33XX_IOPAD(0x8b4, PIN_OUTPUT | MUX_MODE0) /* (W3) lcd_data5.lcd_data5 */
			AM33XX_IOPAD(0x8b8, PIN_OUTPUT | MUX_MODE0) /* (V3) lcd_data6.lcd_data6 */
			AM33XX_IOPAD(0x8bc, PIN_OUTPUT | MUX_MODE0) /* (U3) lcd_data7.lcd_data7 */
			AM33XX_IOPAD(0x8c0, PIN_OUTPUT | MUX_MODE0) /* (V4) lcd_data8.lcd_data8 */
			AM33XX_IOPAD(0x8c4, PIN_OUTPUT | MUX_MODE0) /* (W4) lcd_data9.lcd_data9 */
			AM33XX_IOPAD(0x8c8, PIN_OUTPUT | MUX_MODE0) /* (U5) lcd_data10.lcd_data10 */
			AM33XX_IOPAD(0x8cc, PIN_OUTPUT | MUX_MODE0) /* (V5) lcd_data11.lcd_data11 */
			AM33XX_IOPAD(0x8d0, PIN_OUTPUT | MUX_MODE0) /* (V6) lcd_data12.lcd_data12 */
			AM33XX_IOPAD(0x8d4, PIN_OUTPUT | MUX_MODE0) /* (U6) lcd_data13.lcd_data13 */
			AM33XX_IOPAD(0x8d8, PIN_OUTPUT | MUX_MODE0) /* (W6) lcd_data14.lcd_data14 */
			AM33XX_IOPAD(0x8dc, PIN_OUTPUT | MUX_MODE0) /* (V7) lcd_data15.lcd_data15 */
			AM33XX_IOPAD(0x83c, PIN_OUTPUT | MUX_MODE1) /* (V17) gpmc_ad15.lcd_data16 */
			AM33XX_IOPAD(0x838, PIN_OUTPUT | MUX_MODE1) /* (W17) gpmc_ad14.lcd_data17 */
			AM33XX_IOPAD(0x834, PIN_OUTPUT | MUX_MODE1) /* (T13) gpmc_ad13.lcd_data18 */
			AM33XX_IOPAD(0x830, PIN_OUTPUT | MUX_MODE1) /* (U13) gpmc_ad12.lcd_data19 */
			AM33XX_IOPAD(0x82c, PIN_OUTPUT | MUX_MODE1) /* (U12) gpmc_ad11.lcd_data20 */
			AM33XX_IOPAD(0x828, PIN_OUTPUT | MUX_MODE1) /* (T12) gpmc_ad10.lcd_data21 */
			AM33XX_IOPAD(0x824, PIN_OUTPUT | MUX_MODE1) /* (W16) gpmc_ad9.lcd_data22 */
			AM33XX_IOPAD(0x820, PIN_OUTPUT | MUX_MODE1) /* (V15) gpmc_ad8.lcd_data23 */
		>;
	};

	mymdio1_pins_default: mymdio1_pins_default {
		pinctrl-single,pins = <
			AM33XX_IOPAD(0x94c, PIN_OUTPUT | MUX_MODE0) /* (R19) mdio_clk.mdio_clk */
			AM33XX_IOPAD(0x948, PIN_INPUT | MUX_MODE0) /* (P17) mdio_data.mdio_data */
		>;
	};

	mymmc2_pins_default: mymmc2_pins_default {
		pinctrl-single,pins = <
			AM33XX_IOPAD(0x900, PIN_INPUT | MUX_MODE0) /* (G19) mmc0_clk.mmc0_clk */
			AM33XX_IOPAD(0x904, PIN_INPUT | MUX_MODE0) /* (G17) mmc0_cmd.mmc0_cmd */
			AM33XX_IOPAD(0x8fc, PIN_INPUT | MUX_MODE0) /* (G18) mmc0_dat0.mmc0_dat0 */
			AM33XX_IOPAD(0x8f8, PIN_INPUT | MUX_MODE0) /* (H17) mmc0_dat1.mmc0_dat1 */
			AM33XX_IOPAD(0x8f4, PIN_INPUT | MUX_MODE0) /* (H18) mmc0_dat2.mmc0_dat2 */
			AM33XX_IOPAD(0x8f0, PIN_INPUT | MUX_MODE0) /* (H19) mmc0_dat3.mmc0_dat3 */
		>;
	};

	myrgmii1_pins_default: myrgmii1_pins_default {
		pinctrl-single,pins = <
			AM33XX_IOPAD(0x914, PIN_OUTPUT | MUX_MODE2) /* (K17) gmii1_txen.rgmii1_tctl */
			AM33XX_IOPAD(0x918, PIN_INPUT | MUX_MODE2) /* (L19) gmii1_rxdv.rgmii1_rctl */
			AM33XX_IOPAD(0x92c, PIN_OUTPUT | MUX_MODE2) /* (N19) gmii1_txclk.rgmii1_tclk */
			AM33XX_IOPAD(0x930, PIN_INPUT | MUX_MODE2) /* (M19) gmii1_rxclk.rgmii1_rclk */
			AM33XX_IOPAD(0x928, PIN_OUTPUT | MUX_MODE2) /* (L18) gmii1_txd0.rgmii1_td0 */
			AM33XX_IOPAD(0x924, PIN_OUTPUT | MUX_MODE2) /* (M18) gmii1_txd1.rgmii1_td1 */
			AM33XX_IOPAD(0x920, PIN_OUTPUT | MUX_MODE2) /* (N18) gmii1_txd2.rgmii1_td2 */
			AM33XX_IOPAD(0x91c, PIN_OUTPUT | MUX_MODE2) /* (M17) gmii1_txd3.rgmii1_td3 */
			AM33XX_IOPAD(0x940, PIN_INPUT | MUX_MODE2) /* (P18) gmii1_rxd0.rgmii1_rd0 */
			AM33XX_IOPAD(0x93c, PIN_INPUT | MUX_MODE2) /* (P19) gmii1_rxd1.rgmii1_rd1 */
			AM33XX_IOPAD(0x938, PIN_INPUT | MUX_MODE2) /* (N16) gmii1_rxd2.rgmii1_rd2 */
			AM33XX_IOPAD(0x934, PIN_INPUT | MUX_MODE2) /* (N17) gmii1_rxd3.rgmii1_rd3 */
		>;
	};

	myrmii1_pins_default: myrmii1_pins_default {
		pinctrl-single,pins = <
			AM33XX_IOPAD(0x90c, PIN_INPUT | MUX_MODE1) /* (J18) gmii1_crs.rmii1_crs_dv */
			AM33XX_IOPAD(0x910, PIN_INPUT | MUX_MODE1) /* (K19) gmii1_rxer.rmii1_rxer */
			AM33XX_IOPAD(0x944, PIN_INPUT | MUX_MODE0) /* (K18) rmii1_refclk.rmii1_refclk */
		>;
	};

	myrtc1_pins_default: myrtc1_pins_default {
		pinctrl-single,pins = <
			AM33XX_IOPAD(0x9f8, PIN_INPUT | MUX_MODE0) /* (B7) RTC_PORz.RTC_PORz */
			AM33XX_IOPAD(0xa00, PIN_OUTPUT | MUX_MODE0) /* (B5) EXT_WAKEUP.EXT_WAKEUP */
			AM33XX_IOPAD(0x9fc, PIN_INPUT | MUX_MODE0) /* (C7) PMIC_POWER_EN.PMIC_POWER_EN */
			AM33XX_IOPAD(0xa04, PIN_INPUT | MUX_MODE0) /* (A7) ENZ_KALDO_1P8V.ENZ_KALDO_1P8V */
		>;
	};

	myspi1_pins_default: myspi1_pins_default {
		pinctrl-single,pins = <
			AM33XX_IOPAD(0x950, PIN_INPUT | MUX_MODE0) /* (A18) spi0_sclk.spi0_sclk */
			AM33XX_IOPAD(0x954, PIN_INPUT | MUX_MODE0) /* (B18) spi0_d0.spi0_d0 */
			AM33XX_IOPAD(0x958, PIN_INPUT | MUX_MODE0) /* (B17) spi0_d1.spi0_d1 */
			AM33XX_IOPAD(0x95c, PIN_INPUT | MUX_MODE0) /* (A17) spi0_cs0.spi0_cs0 */
		>;
	};

	myuart1_pins_default: myuart1_pins_default {
		pinctrl-single,pins = <
			AM33XX_IOPAD(0x970, PIN_INPUT | MUX_MODE0) /* (E19) uart0_rxd.uart0_rxd */
			AM33XX_IOPAD(0x974, PIN_OUTPUT | MUX_MODE0) /* (F17) uart0_txd.uart0_txd */
			AM33XX_IOPAD(0x968, PIN_INPUT | MUX_MODE0) /* (F19) uart0_ctsn.uart0_ctsn */
			AM33XX_IOPAD(0x96c, PIN_OUTPUT | MUX_MODE0) /* (F18) uart0_rtsn.uart0_rtsn */
		>;
	};

	myuart2_pins_default: myuart2_pins_default {
		pinctrl-single,pins = <
			AM33XX_IOPAD(0x980, PIN_INPUT | MUX_MODE0) /* (D18) uart1_rxd.uart1_rxd */
			AM33XX_IOPAD(0x984, PIN_OUTPUT | MUX_MODE0) /* (C19) uart1_txd.uart1_txd */
			AM33XX_IOPAD(0x978, PIN_INPUT | MUX_MODE0) /* (E17) uart1_ctsn.uart1_ctsn */
			AM33XX_IOPAD(0x97c, PIN_OUTPUT | MUX_MODE0) /* (D19) uart1_rtsn.uart1_rtsn */
		>;
	};

	myusb1_pins_default: myusb1_pins_default {
		pinctrl-single,pins = <
			AM33XX_IOPAD(0xa1c, PIN_OUTPUT | MUX_MODE0) /* (G16) USB0_DRVVBUS.USB0_DRVVBUS */
		>;
	};

	cpsw_default: cpsw_default {
		pinctrl-single,pins = <
			/* Slave 1 */
			0x110 (PIN_INPUT_PULLUP | MUX_MODE0)	/* mii1_rxerr.mii1_rxerr */
			0x114 (PIN_OUTPUT_PULLDOWN | MUX_MODE0)	/* mii1_txen.mii1_txen */
			0x118 (PIN_INPUT_PULLUP | MUX_MODE0)	/* mii1_rxdv.mii1_rxdv */
			0x11c (PIN_OUTPUT_PULLDOWN | MUX_MODE0)	/* mii1_txd3.mii1_txd3 */
			0x120 (PIN_OUTPUT_PULLDOWN | MUX_MODE0)	/* mii1_txd2.mii1_txd2 */
			0x124 (PIN_OUTPUT_PULLDOWN | MUX_MODE0)	/* mii1_txd1.mii1_txd1 */
			0x128 (PIN_OUTPUT_PULLDOWN | MUX_MODE0)	/* mii1_txd0.mii1_txd0 */
			0x12c (PIN_INPUT_PULLUP | MUX_MODE0)	/* mii1_txclk.mii1_txclk */
			0x130 (PIN_INPUT_PULLUP | MUX_MODE0)	/* mii1_rxclk.mii1_rxclk */
			0x134 (PIN_INPUT_PULLUP | MUX_MODE0)	/* mii1_rxd3.mii1_rxd3 */
			0x138 (PIN_INPUT_PULLUP | MUX_MODE0)	/* mii1_rxd2.mii1_rxd2 */
			0x13c (PIN_INPUT_PULLUP | MUX_MODE0)	/* mii1_rxd1.mii1_rxd1 */
			0x140 (PIN_INPUT_PULLUP | MUX_MODE0)	/* mii1_rxd0.mii1_rxd0 */
		>;
	};

	cpsw_sleep: cpsw_sleep {
		pinctrl-single,pins = <
			/* Slave 1 reset value */
			0x110 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x114 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x118 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x11c (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x120 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x124 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x128 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x12c (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x130 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x134 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x138 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x13c (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x140 (PIN_INPUT_PULLDOWN | MUX_MODE7)
		>;
	};

	davinci_mdio_default: davinci_mdio_default {
		pinctrl-single,pins = <
			/* MDIO */
			0x148 (PIN_INPUT_PULLUP | SLEWCTRL_FAST | MUX_MODE0)	/* mdio_data.mdio_data */
			0x14c (PIN_OUTPUT_PULLUP | MUX_MODE0)			/* mdio_clk.mdio_clk */
		>;
	};

	davinci_mdio_sleep: davinci_mdio_sleep {
		pinctrl-single,pins = <
			/* MDIO reset value */
			0x148 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x14c (PIN_INPUT_PULLDOWN | MUX_MODE7)
		>;
	};

};

&uart0 {
	pinctrl-names = "default";
	pinctrl-0 = <&uart0_pins>;

	status = "okay";
};

&uart1 {
	pinctrl-names = "default";
	pinctrl-0 = <&uart1_pins>;

	status = "okay";
};

&usb {
	status = "okay";
};

&usb_ctrl_mod {
	status = "okay";
};

&usb0_phy {
	status = "okay";
};

&usb1_phy {
	status = "okay";
};

&usb0 {
	status = "okay";
	dr_mode = "host";

		pinctrl-names = "default";
	pinctrl-0 = <&myusb1_pins_default>;
};

&usb1 {
	status = "okay";
	dr_mode = "host";
};

&cppi41dma  {
	status = "okay";
};

&cpsw_emac0 {
	phy-handle = <&ethphy0>;
	phy-mode = "mii";
};

&davinci_mdio {
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&davinci_mdio_default>;
	pinctrl-1 = <&davinci_mdio_sleep>;
	status = "okay";

	ethphy0: ethernet-phy@0 {
		reg = <0>;
	};
};

&mac {
	slaves = <1>;
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&cpsw_default>;
	pinctrl-1 = <&cpsw_sleep>;
	status = "okay";
};


&gpmc {
	status = "okay";
	pinctrl-names = "default";
	pinctrl-0 = <&mygpmc1_pins_default>;
	ranges = <0 0 0x08000000 0x1000000>;	/* CS0: 16MB for NAND */
	nand@0,0 {
		reg = <0 0 4>; /* CS0, offset 0, IO size 4 */
		ti,nand-ecc-opt = "bch8";
		ti,elm-id = <&elm>;
		nand-bus-width = <8>;
		gpmc,device-width = <1>;
		gpmc,sync-clk-ps = <0>;
		gpmc,cs-on-ns = <0>;
		gpmc,cs-rd-off-ns = <44>;
		gpmc,cs-wr-off-ns = <44>;
		gpmc,adv-on-ns = <6>;
		gpmc,adv-rd-off-ns = <34>;
		gpmc,adv-wr-off-ns = <44>;
		gpmc,we-on-ns = <0>;
		gpmc,we-off-ns = <40>;
		gpmc,oe-on-ns = <0>;
		gpmc,oe-off-ns = <54>;
		gpmc,access-ns = <64>;
		gpmc,rd-cycle-ns = <82>;
		gpmc,wr-cycle-ns = <82>;
		gpmc,wait-on-read = "true";
		gpmc,wait-on-write = "true";
		gpmc,bus-turnaround-ns = <0>;
		gpmc,cycle2cycle-delay-ns = <0>;
		gpmc,clk-activation-ns = <0>;
		gpmc,wait-monitoring-ns = <0>;
		gpmc,wr-access-ns = <40>;
		gpmc,wr-data-mux-bus-ns = <0>;
		/* MTD partition table */
		/* All SPL-* partitions are sized to minimal length
		 * which can be independently programmable. For
		 * NAND flash this is equal to size of erase-block */
		#address-cells = <1>;
		#size-cells = <1>;
		partition@0 {
			label = "NAND.SPL";
			reg = <0x00000000 0x000020000>;
		};
		partition@1 {
			label = "NAND.SPL.backup1";
			reg = <0x00020000 0x00020000>;
		};
		partition@2 {
			label = "NAND.SPL.backup2";
			reg = <0x00040000 0x00020000>;
		};
		partition@3 {
			label = "NAND.SPL.backup3";
			reg = <0x00060000 0x00020000>;
		};
		partition@4 {
			label = "NAND.u-boot-spl-os";
			reg = <0x00080000 0x00040000>;
		};
		partition@5 {
			label = "NAND.u-boot";
			reg = <0x000C0000 0x00100000>;
		};
		partition@6 {
			label = "NAND.u-boot-env";
			reg = <0x001C0000 0x00020000>;
		};
		partition@7 {
			label = "NAND.u-boot-env.backup1";
			reg = <0x001E0000 0x00020000>;
		};
		partition@8 {
			label = "NAND.kernel";
			reg = <0x00200000 0x00800000>;
		};
		partition@9 {
			label = "NAND.file-system";
			reg = <0x00A00000 0x0F600000>;
		};
	};
};

&mmc1 {
	status = "okay";
	bus-width = <4>;
	pinctrl-names = "default";
	pinctrl-0 = <&mymmc2_pins_default>;
	broken-cd;
};
